apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ppmservice.fullname" . }}
  labels:
    {{- include "ppmservice.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deploymentSpec.replicas }}
  selector:
    matchLabels:
      deployment: {{ include "ppmservice.fullname" . }}
      {{- include "ppmservice.selectorLabels" . | nindent 6 }}
  progressDeadlineSeconds: {{ .Values.deploymentSpec.progressDeadlineSeconds }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.deploymentSpec.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.deploymentSpec.strategy.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ppmservice.selectorLabels" . | nindent 8 }}
        deployment: {{ include "ppmservice.fullname" . }}
    spec:
      automountServiceAccountToken: false
      containers:
        - name: {{ .Values.image.stream }}
          image: 'image-registry.openshift-image-registry.svc:5000/{{ .Values.OpenShift.ImageProject }}/{{ .Values.image.stream }}:{{ .Values.OpenShift.Environment }}'
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.Application.Port }}
              protocol: TCP
          env:
            {{- range $key, $val := .Values.Application.Environment }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
            {{- range $key, $configMap := .Values.Application.Configuration }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  key: {{ $key }}
                  name: {{ $configMap }}
            {{- end }}
            {{- range $key, $secret := .Values.Application.Secrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret }}
                  key: {{ $key }}
            {{- end }}                 
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 3
            exec:
              command:
                - ./health-check.sh
          lifecycle:
            preStop:
              exec:
                command:
                  - sleep
                  - 10
          terminationMessagePath: /{{ include "ppmservice.fullname" . }}/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: volume-pharmanet-cert
              readOnly: true
              mountPath: /usr/local/pharmanet
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: volume-pharmanet-cert
          configMap:
            name: pharmanet-{{ .Values.OpenShift.Environment }}-cert
            defaultMode: 420
